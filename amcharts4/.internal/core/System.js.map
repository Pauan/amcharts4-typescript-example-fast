{"version":3,"file":"System.js","sourceRoot":"","sources":["../../../../src/.internal/core/System.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { registry } from \"./Registry\";\r\nimport { Sprite } from \"./Sprite\";\r\nimport { Container } from \"./Container\";\r\nimport { svgContainers, SVGContainer } from \"./rendering/SVGContainer\";\r\nimport { Component } from \"./Component\";\r\nimport { options } from \"./Options\";\r\nimport { Paper } from \"./rendering/Paper\";\r\nimport { raf } from \"./utils/AsyncPending\";\r\nimport { animations } from \"./utils/Animation\";\r\nimport { triggerIdle } from \"./utils/AsyncPending\";\r\nimport * as $dom from \"./utils/DOM\";\r\nimport * as $array from \"./utils/Array\";\r\nimport * as $type from \"./utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * The main class that handles system-wide tasks, like caching, heartbeats, etc.\r\n * @important\r\n */\r\nexport class System {\r\n\r\n\t/**\r\n\t * Unique ID of the object.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tpublic uid: string = registry.getUniqueId();\r\n\r\n\t/**\r\n\t * amCharts Version.\r\n\t *\r\n\t * This follows npm's semver specification.\r\n\t *\r\n\t * @see {@link https://docs.npmjs.com/misc/semver}\r\n\t * @type {string}\r\n\t */\r\n\tstatic VERSION: string = \"4.0.0-beta.63\";\r\n\r\n\t/**\r\n\t * @todo Description\r\n\t * @todo Needed?\r\n\t * @ignore Exclude from docs\r\n\t * @type {number}\r\n\t */\r\n\tpublic dummyCounter: number = 0;\r\n\r\n\t/**\r\n\t * @todo Description\r\n\t * @ignore Exclude from docs\r\n\t * @type {number}\r\n\t */\r\n\tpublic time: number;\r\n\r\n\r\n\tprotected _frameRequested: boolean = false;\r\n\r\n\tprotected _updateStepDuration:number = 50;\r\n\r\n\t/**\r\n\t * Performs initialization of the System object.\r\n\t *\r\n\t * Called when the first [[Sprite]] object is created.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic constructor() {\r\n\t\tthis.time = Date.now();\r\n\t}\r\n\r\n\t/**\r\n\t * Reports time elapsed since timer was reset.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Needed?\r\n\t * @param {string}   msg    Message to report in console\r\n\t * @param {boolean}  reset  Reset time counter\r\n\t */\r\n\tpublic reportTime(msg: string, reset?: boolean): void {\r\n\t\tif (this.dummyCounter < 6) {\r\n\t\t\t//console.log(Date.now() - this.time, msg, this.dummyCounter2);\r\n\t\t}\r\n\t\tif (reset) {\r\n\t\t\tthis.time = Date.now();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Performs \"heartbeat\" operations `frameRate` number of times per second.\r\n\t *\r\n\t * When the chart element is invalidated, it is not immediately redrawn.\r\n\t *\r\n\t * Instead it waits for the next `update()` cycle to be re-validated.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Maybe should be private?\r\n\t */\r\n\tpublic update(): void {\r\n\r\n\t\tthis._frameRequested = false;\t\r\n\r\n\t\tlet time = Date.now();\t\r\n\r\n\t\tregistry.dispatchImmediately(\"enterframe\");\r\n\r\n\t\t//this.validateLayouts();\r\n\t\t//this.validatePositions();\r\n\r\n\t\tlet skippedComponents: Component[] = [];\r\n\r\n\t\t// data objects first - do all calculations\r\n\t\t// only data is parsed in chunks, thats why we do for loop instead of a while like with other invalid items.\r\n\t\t// important to go backwards, as items are removed!\r\n\t\t// TODO use iterator instead\r\n\t\twhile (registry.invalidDatas.length > 0) {\r\n\t\t\tlet component: Component = registry.invalidDatas[0];\r\n\t\t\tlet dataProvider: $type.Optional<Component> = component.dataProvider;\r\n\r\n\t\t\tif (!component.isDisposed()) {\t\t\r\n\r\n\t\t\t\tif (dataProvider && dataProvider.dataInvalid) {\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tdataProvider.validateData();\r\n\t\t\t\t\t\tif (dataProvider.dataValidationProgress < 1) {\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcatch (e) {\r\n\t\t\t\t\t\t$array.remove(registry.invalidDatas, dataProvider);\r\n\t\t\t\t\t\tdataProvider.raiseCriticalError(e);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tcomponent.validateData();\r\n\t\t\t\t\t\tif (component.dataValidationProgress < 1) {\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcatch (e) {\r\n\t\t\t\t\t\t$array.remove(registry.invalidDatas, component);\r\n\t\t\t\t\t\tcomponent.raiseCriticalError(e);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t$array.remove(registry.invalidDatas, component);\r\n\t\t\t}\r\n\r\n\t\t\tif(Date.now() - time > this._updateStepDuration){\r\n\t\t\t\tskippedComponents = registry.invalidDatas;\r\n\t\t\t\tbreak;\r\n\t\t\t}\t\t\t\r\n\t\t}\r\n\r\n\t\twhile (registry.invalidRawDatas.length > 0) {\r\n\t\t\tlet component: Component = registry.invalidRawDatas[0];\r\n\t\t\tif (!component.isDisposed()) {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tcomponent.validateRawData();\r\n\t\t\t\t}\r\n\t\t\t\tcatch (e) {\r\n\t\t\t\t\t$array.remove(registry.invalidRawDatas, component);\r\n\t\t\t\t\tcomponent.raiseCriticalError(e);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t$array.remove(registry.invalidRawDatas, component);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// TODO use iterator instead\r\n\t\twhile (registry.invalidDataItems.length > 0) {\r\n\t\t\tlet component: Component = registry.invalidDataItems[0];\r\n\r\n\t\t\tlet dataProvider: $type.Optional<Component> = component.dataProvider;\r\n\r\n\t\t\t// this is needed to avoid partial value validation when data is parsed in chunks\r\n\t\t\tif (component.isDisposed() || component.dataInvalid || (dataProvider && dataProvider.dataInvalid)) {\r\n\t\t\t\t// void\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tcomponent.validateDataItems();\r\n\t\t\t\t}\r\n\t\t\t\tcatch (e) {\r\n\t\t\t\t\t$array.remove(registry.invalidDataItems, component);\r\n\t\t\t\t\tcomponent.raiseCriticalError(e);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// this might seem too much, as validateValues removes from invalidDataItems aswell, but just to be sure (in case validateData is overriden and no super is called)\r\n\t\t\t$array.remove(registry.invalidDataItems, component);\r\n\t\t}\r\n\r\n\t\t// TODO use iterator instead\r\n\t\twhile (registry.invalidDataRange.length > 0) {\r\n\t\t\tlet component: Component = registry.invalidDataRange[0];\r\n\r\n\t\t\tlet dataProvider: $type.Optional<Component> = component.dataProvider;\r\n\r\n\t\t\tif (component.isDisposed() || component.dataInvalid || (dataProvider && dataProvider.dataInvalid)) {\r\n\t\t\t\t// void\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tcomponent.validateDataRange();\r\n\t\t\t\t\tif (!component.skipRangeEvent) {\r\n\t\t\t\t\t\tcomponent.dispatchImmediately(\"datarangechanged\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcomponent.skipRangeEvent = false;\r\n\t\t\t\t}\r\n\t\t\t\tcatch (e) {\r\n\t\t\t\t\t$array.remove(registry.invalidDataRange, component);\r\n\t\t\t\t\tcomponent.raiseCriticalError(e);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// this might seem too much, as validateDataRange removes from invalidDataRange aswell, but just to be sure (in case validateData is overriden and no super is called)\r\n\t\t\t$array.remove(registry.invalidDataRange, component);\r\n\t\t}\r\n\r\n\t\tlet skippedSprites: Sprite[] = [];\r\n\r\n\t\t// display objects later\r\n\t\t// TODO use iterator instead\r\n\r\n\t\tfor(let key in registry.invalidLayouts){\r\n\t\t\tthis.validateLayouts(key);\r\n\t\t}\r\n\t\tfor(let key in registry.invalidPositions){\r\n\t\t\tthis.validatePositions(key);\r\n\t\t}\r\n\r\n\r\n\t\tlet hasSkipped:boolean = false;\r\n\r\n\t\ttime = Date.now();\r\n\r\n\t\tfor(var key in registry.invalidSprites){\r\n\t\t\tlet count = 0;\r\n\t\t\t\r\n\t\t\tlet invalidSprites = registry.invalidSprites[key];\r\n\r\n\t\t\twhile (invalidSprites.length > 0) {\r\n\t\t\t\tthis.validateLayouts(key);\r\n\t\t\t\tthis.validatePositions(key);\r\n\r\n\t\t\t\tcount++;\r\n\r\n\t\t\t\tif(count == 5){\r\n\t\t\t\t\tif(Date.now() - time > this._updateStepDuration){\r\n\t\t\t\t\t\tskippedSprites = invalidSprites;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcount = 0;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet sprite: Sprite = invalidSprites[invalidSprites.length - 1];\r\n\r\n\t\t\t\t// we need to check this, as validateLayout might validate sprite\r\n\t\t\t\tif (sprite && !sprite.isDisposed()) {\r\n\t\t\t\t\tif (sprite instanceof Component && (sprite.dataInvalid || (sprite.dataProvider && sprite.dataProvider.dataInvalid))) {\r\n\t\t\t\t\t\t// void\r\n\t\t\t\t\t\tskippedSprites.push(sprite);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tif (sprite.dataItem && sprite.dataItem.component && sprite.dataItem.component.dataInvalid && !sprite.dataItem.component.isTemplate) {\r\n\t\t\t\t\t\t\t// void\r\n\t\t\t\t\t\t\tskippedSprites.push(sprite);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\ttry {\r\n\t\t\t\t\t\t\t\tif (sprite instanceof Container) {\r\n\t\t\t\t\t\t\t\t\tsprite.children.each((child) => {\r\n\t\t\t\t\t\t\t\t\t\tif (child.invalid) {\r\n\t\t\t\t\t\t\t\t\t\t\tif (child instanceof Component && (child.dataInvalid || (child.dataProvider && child.dataProvider.dataInvalid))) {\r\n\t\t\t\t\t\t\t\t\t\t\t\tskippedSprites.push(child);\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\telse if (child.dataItem && child.dataItem.component && child.dataItem.component.dataInvalid) {\r\n\t\t\t\t\t\t\t\t\t\t\t\tskippedSprites.push(child);\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\t\t\t\tchild.validate();\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tsprite.validate();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tcatch (e) {\r\n\t\t\t\t\t\t\t\tsprite.invalid = false;\r\n\t\t\t\t\t\t\t\t$array.remove(invalidSprites, sprite);\r\n\t\t\t\t\t\t\t\tsprite.raiseCriticalError(e);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// this might seem too much, but it's ok\r\n\t\t\t\t\tsprite.invalid = false;\r\n\t\t\t\t}\r\n\t\t\t\t$array.remove(invalidSprites, sprite);\r\n\t\t\t}\r\n\r\n\t\t\tif(Date.now() - time > this._updateStepDuration){\r\n\t\t\t\tskippedSprites = invalidSprites;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfor(var key in registry.invalidSprites){\r\n\t\t\tif(registry.invalidSprites[key].length > 0){\r\n\t\t\t\thasSkipped = true;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif(skippedComponents.length > 0){\r\n\t\t\tregistry.invalidDatas = skippedComponents;\r\n\t\t}\r\n\r\n\t\t// TODO make this more efficient\r\n\t\t// TODO don't copy the array\r\n\t\t$array.each($array.copy(animations), (x) => {\r\n\t\t\tx.update();\r\n\t\t});\r\n\r\n\t\t// to avoid flicker, we validate positions last time\r\n\t\t//this.validateLayouts();\r\n\t\t//this.validatePositions();\r\n\t\t//if(!hasSkipped){\r\n\t\t\tfor(let key in registry.invalidLayouts){\r\n\t\t\t\tthis.validateLayouts(key);\r\n\t\t\t}\r\n\t\t\tfor(let key in registry.invalidPositions){\r\n\t\t\t\tthis.validatePositions(key);\r\n\t\t\t}\r\n\t\t//}\r\n\r\n\t\ttriggerIdle();\r\n\r\n\t\t// to avoid flicker, we validate positions last time\r\n\t\t//this.validateLayouts();\r\n\t\t//this.validatePositions();\r\n\r\n\t\tregistry.dispatchImmediately(\"exitframe\");\r\n\r\n\t\tif (hasSkipped || animations.length > 0 || skippedComponents.length > 0) {\r\n\t\t\tthis.requestFrame();\r\n\t\t}\r\n\r\n\t\tif(skippedSprites.length == 0){\r\n\t\t\tthis._updateStepDuration = 250;\r\n\t\t}\r\n\t}\r\n\r\n\trequestFrame() {\r\n\t\tif (!this._frameRequested) {\r\n\t\t\traf(() => {\r\n\t\t\t\tthis.update();\r\n\t\t\t});\r\n\t\t\tthis._frameRequested = true;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers position re-validation on all [[Sprite]] elements that have\r\n\t * invalid(ated) positions.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Maybe should be private?\r\n\t */\r\n\tpublic validatePositions(id:string): void {\r\n\t\t// invalid positions\r\n\t\t// TODO use iterator instead\r\n\t\tlet invalidPositions = registry.invalidPositions[id];\r\n\r\n\t\twhile (invalidPositions.length > 0) {\r\n\t\t\tlet sprite: Sprite = invalidPositions[invalidPositions.length - 1];\r\n\t\t\tif (!sprite.isDisposed()) {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tif (sprite instanceof Container) {\r\n\t\t\t\t\t\tsprite.children.each((sprite) => {\r\n\t\t\t\t\t\t\tif (sprite.positionInvalid) {\r\n\t\t\t\t\t\t\t\tsprite.validatePosition();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tsprite.validatePosition();\r\n\t\t\t\t}\r\n\t\t\t\tcatch (e) {\r\n\t\t\t\t\tsprite.positionInvalid = false;\r\n\t\t\t\t\t$array.remove(invalidPositions, sprite);\r\n\t\t\t\t\tsprite.raiseCriticalError(e);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t$array.remove(invalidPositions, sprite);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers position re-validation on all [[Container]] elements that have\r\n\t * invalid(ated) layouts.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Maybe should be private?\r\n\t */\r\n\tpublic validateLayouts(id:string): void {\r\n\t\t// invalid positions\r\n\t\t// TODO use iterator instead\r\n\t\tlet invalidLayouts = registry.invalidLayouts[id];\r\n\t\twhile (invalidLayouts.length > 0) {\r\n\t\t\tlet container: Container = invalidLayouts[invalidLayouts.length - 1];\r\n\t\t\tif (!container.isDisposed()) {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tcontainer.children.each((sprite) => {\r\n\t\t\t\t\t\tif (sprite instanceof Container && sprite.layoutInvalid && !sprite.isDisposed()) {\r\n\t\t\t\t\t\t\tsprite.validateLayout();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t})\r\n\r\n\t\t\t\t\tcontainer.validateLayout();\r\n\t\t\t\t}\r\n\t\t\t\tcatch (e) {\r\n\t\t\t\t\tcontainer.layoutInvalid = false;\r\n\t\t\t\t\t$array.remove(invalidLayouts, container);\r\n\t\t\t\t\tcontainer.raiseCriticalError(e);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t$array.remove(invalidLayouts, container);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Outputs string to console if `verbose` is `true`.\r\n\t *\r\n\t * @param {any} value Message to output to console\r\n\t */\r\n\tpublic log(value: any): void {\r\n\t\tif (options.verbose) {\r\n\t\t\tif (console) {\r\n\t\t\t\tconsole.log(value);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Get current theme\r\n\t * @return {ITheme} [description]\r\n\t */\r\n\t/*public get theme(): ITheme {\r\n\t\treturn $array.last(this.themes);\r\n\t}*/\r\n\r\n\t/**\r\n\t * Number of times per second charts will be updated.\r\n\t *\r\n\t * This means that each time an element is invalidated it will wait for the\r\n\t * next cycle to be re-validated, and possibly redrawn.\r\n\t *\r\n\t * This happens every `1000 / frameRate` milliseconds.\r\n\t *\r\n\t * Reducing this number may reduce the load on the CPU, but might slightly\r\n\t * reduce smoothness of the animations.\r\n\t *\r\n\t * @type {number} Frame rate\r\n\t */\r\n\tpublic set frameRate(value: number) {\r\n\t\tregistry.frameRate = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Frame rate\r\n\t */\r\n\tpublic get frameRate(): number {\r\n\t\treturn registry.frameRate;\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * A singleton global instance of [[System]].\r\n *\r\n * All code should use this, rather than instantiating their\r\n * own System objects.\r\n */\r\nexport const system: System = new System();\r\n"]}